name: Stage Deploy

concurrency:
  group: stage_deploy
  cancel-in-progress: true

on:
  push:
    branches:
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - develop
    types: [closed]

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mssp
  DEPLOY_PATH: "./MSPP"
  DEPLOY_FOLDER: MSPP

defaults:
  run:
    working-directory: .

jobs:
  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Sanitize repo slug
        uses: actions/github-script@v6
        id: repo_slug
        with:
          result-encoding: string
          script: return 'ghcr.io/${{ github.repository }}'.toLowerCase()
      - name: Push Stage to GitHub Container Registry
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}"
          push: true
          tags: ${{ steps.repo_slug.outputs.result }}:stage  
          # tags: ${{ env.IMAGE_NAME }}:stage

  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: stage_deploy
    needs: build-and-push-image-to-github-packages
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: develop
      - name: Sanitize repo slug
        uses: actions/github-script@v6
        id: repo_slug_deploy
        with:
          result-encoding: string
          script: return 'ghcr.io/${{ github.repository }}'.toLowerCase()
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            # mkdir ${{ env.DEPLOY_FOLDER }}
            cd ${{ env.DEPLOY_PATH }}
            # docker pull ${{ steps.repo_slug_deploy.outputs.result }}:stage
            docker compose pull ${{ steps.repo_slug.outputs.result }}:stage
            # Очистка неиспользуемых контейнеров, образов, сетей
            docker system prune --force
            docker compose rm -f mssp
            touch .env
            # Django environment variables
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env-stage
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env-stage
            # Secrets variables for google sheets in Django:
            echo GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }} >> .env-stage
            echo GOOGLE_PRIVATE_KEY=${{ secrets.GOOGLE_PRIVATE_KEY }} >> .env-stage
            # Secrets variables for webhook:
            echo WEBHOOK_MODE=${{ secrets.WEBHOOK_MODE }} >> .env-stage
            echo WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} >> .env-stage            
            # Установка приложения
            docker compose up -d
